#! /usr/bin/perl
# Author: Elizabeth Loss-Cutler-Hull.

# Based heavily on 256colors.pl in the xorg tree, which was based on 256colors2.pl.
# Also based on 256colors2.pl directly.

# Mode 0 outputs a header file, 8 bit colors.
# Mode 1 outputs a header file, float colors.
# Mode 2 outputs the colors for the temuterm config file.
# Mode 3 just shows all the colors.

use strict;
use warnings;

my $mode = 0;
my $scale = 1;
my ($line, $div, $code, $red, $green, $blue, $gray, $level, $color);

$mode = $ARGV[0] if (defined($ARGV[0]));

if ($mode == 0) {
#    $line = "\t/* %d */ \t{%3d, %3d, %3d}\n";
    $line = "\t{.pixel = %d, .red = 0x%4.4x, .green = 0x%4.4x, .blue = 0x%4.4x},\n";
    $scale = 257;
    $div = 1;
} elsif ($mode == 1) {
#    $line = "\t/* %d */ \t{%3d, %3d, %3d}\n";
    $line = "\t/* %d */ {.red = %16.16f, .green = %16.16f, .blue = %16.16f, .alpha = 1},\n";
    $scale = 257;
    $div = 0xffff;
} elsif ($mode == 2) {
    $line = "color:\t%d\t#%4.4x%4.4x%4.4x\n";
    $scale = 257;
    $div = 1;
} elsif ($mode == 3) {
    $line = ":%%s/\\(\\<cterm\\(\\w*\\)=%d\\>\\)/XX\\1 gui\\2=#%2.2x%2.2x%2.2x/g\n";
    $scale = 1;
    $div = 1;
}

if ($mode == 0) {
    print <<EOF;
/*
 * This header was generated by $0
 */

EOF

}
if ($mode < 4) {
    for ($code = 0; $code < 16; $code ++) {
	$blue = ($code & 4) ? 170 : 0;
	$green = ($code & 2) ? 170 : 0;
	$red = ($code & 1) ? 170 : 0;
	if ($code > 7) {
	    $blue += 85;
	    $green += 85;
	    $red += 85;
	}
	printf($line, $code,
		($red * $scale) / $div,
		($green * $scale) / $div,
		($blue * $scale) / $div);
    }
    # colors 16-231 are a 6x6x6 color cube
    for ($red = 0; $red < 6; $red++) {
	for ($green = 0; $green < 6; $green++) {
	    for ($blue = 0; $blue < 6; $blue++) {
		$code = 16 + ($red * 36) + ($green * 6) + $blue;
		printf($line, $code,
			(($red ? ($red * 40 + 55) : 0) * $scale) / $div,
			(($green ? ($green * 40 + 55) : 0) * $scale) / $div,
			(($blue ? ($blue * 40 + 55) : 0) * $scale) / $div);
	    }
	}
    }

    # colors 232-255 are a grayscale ramp, intentionally leaving out
    # black and white
    $code=232;
    for ($gray = 0; $gray < 24; $gray++) {
	$level = ($gray * 10) + 8;
	$code = 232 + $gray;
	$level *= $scale;
	$level = $level / $div;
	printf($line, $code, $level, $level, $level);
    }
}

if ($mode == 4) {
    # display the colors

    # first the system ones:
    print "System colors:\n";
    for ($color = 0; $color < 8; $color++) {
	print "\x1b[48;5;${color}m  ";
    }
    print "\x1b[0m\n";
    for ($color = 8; $color < 16; $color++) {
	print "\x1b[48;5;${color}m  ";
    }
    print "\x1b[0m\n\n";

    # now the color cube
    print "Color cube, 6x6x6:\n";
    for ($green = 0; $green < 6; $green++) {
	for ($red = 0; $red < 6; $red++) {
	    for ($blue = 0; $blue < 6; $blue++) {
		$color = 16 + ($red * 36) + ($green * 6) + $blue;
		print "\x1b[48;5;${color}m  ";
	    }
	    print "\x1b[0m ";
	}
	print "\n";
    }


    # now the grayscale ramp
    print "Grayscale ramp:\n";
    for ($color = 232; $color < 256; $color++) {
	print "\x1b[48;5;${color}m  ";
    }
    print "\x1b[0m\n";
}
